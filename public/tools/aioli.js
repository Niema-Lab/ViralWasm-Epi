(function(G,o){typeof exports=="object"&&typeof module<"u"?module.exports=o():typeof define=="function"&&define.amd?define(o):(G=typeof globalThis<"u"?globalThis:G||self,G.Aioli=o())})(this,function(){"use strict";const G=Symbol("Comlink.proxy"),o=Symbol("Comlink.endpoint"),g=Symbol("Comlink.releaseProxy"),h=Symbol("Comlink.thrown"),r=l=>typeof l=="object"&&l!==null||typeof l=="function",k={canHandle:l=>r(l)&&l[G],serialize(l){const{port1:c,port2:b}=new MessageChannel;return S(l,c),[b,[b]]},deserialize(l){return l.start(),V(l)}},x={canHandle:l=>r(l)&&h in l,serialize({value:l}){let c;return l instanceof Error?c={isError:!0,value:{message:l.message,name:l.name,stack:l.stack}}:c={isError:!1,value:l},[c,[]]},deserialize(l){throw l.isError?Object.assign(new Error(l.value.message),l.value):l.value}},Y=new Map([["proxy",k],["throw",x]]);function S(l,c=self){c.addEventListener("message",function b(t){if(!t||!t.data)return;const{id:e,type:a,path:m}=Object.assign({path:[]},t.data),d=(t.data.argumentList||[]).map(u);let Z;try{const n=m.slice(0,-1).reduce((i,W)=>i[W],l),s=m.reduce((i,W)=>i[W],l);switch(a){case"GET":Z=s;break;case"SET":n[m.slice(-1)[0]]=u(t.data.value),Z=!0;break;case"APPLY":Z=s.apply(n,d);break;case"CONSTRUCT":{const i=new s(...d);Z=U(i)}break;case"ENDPOINT":{const{port1:i,port2:W}=new MessageChannel;S(l,W),Z=J(i,[i])}break;case"RELEASE":Z=void 0;break;default:return}}catch(n){Z={value:n,[h]:0}}Promise.resolve(Z).catch(n=>({value:n,[h]:0})).then(n=>{const[s,i]=L(n);c.postMessage(Object.assign(Object.assign({},s),{id:e}),i),a==="RELEASE"&&(c.removeEventListener("message",b),R(c))})}),c.start&&c.start()}function N(l){return l.constructor.name==="MessagePort"}function R(l){N(l)&&l.close()}function V(l,c){return y(l,[],c)}function X(l){if(l)throw new Error("Proxy has been released and is not useable")}function y(l,c=[],b=function(){}){let t=!1;const e=new Proxy(b,{get(a,m){if(X(t),m===g)return()=>p(l,{type:"RELEASE",path:c.map(d=>d.toString())}).then(()=>{R(l),t=!0});if(m==="then"){if(c.length===0)return{then:()=>e};const d=p(l,{type:"GET",path:c.map(Z=>Z.toString())}).then(u);return d.then.bind(d)}return y(l,[...c,m])},set(a,m,d){X(t);const[Z,n]=L(d);return p(l,{type:"SET",path:[...c,m].map(s=>s.toString()),value:Z},n).then(u)},apply(a,m,d){X(t);const Z=c[c.length-1];if(Z===o)return p(l,{type:"ENDPOINT"}).then(u);if(Z==="bind")return y(l,c.slice(0,-1));const[n,s]=I(d);return p(l,{type:"APPLY",path:c.map(i=>i.toString()),argumentList:n},s).then(u)},construct(a,m){X(t);const[d,Z]=I(m);return p(l,{type:"CONSTRUCT",path:c.map(n=>n.toString()),argumentList:d},Z).then(u)}});return e}function T(l){return Array.prototype.concat.apply([],l)}function I(l){const c=l.map(L);return[c.map(b=>b[0]),T(c.map(b=>b[1]))]}const C=new WeakMap;function J(l,c){return C.set(l,c),l}function U(l){return Object.assign(l,{[G]:!0})}function L(l){for(const[c,b]of Y)if(b.canHandle(l)){const[t,e]=b.serialize(l);return[{type:"HANDLER",name:c,value:t},e]}return[{type:"RAW",value:l},C.get(l)||[]]}function u(l){switch(l.type){case"HANDLER":return Y.get(l.name).deserialize(l.value);case"RAW":return l.value}}function p(l,c,b){return new Promise(t=>{const e=z();l.addEventListener("message",function a(m){!m.data||!m.data.id||m.data.id!==e||(l.removeEventListener("message",a),t(m.data))}),l.start&&l.start(),l.postMessage(Object.assign({id:e},c),b)})}function z(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}const H="",K=typeof window<"u"&&window.Blob&&new Blob([atob(H)],{type:"text/javascript;charset=utf-8"});function f(){const l=K&&(window.URL||window.webkitURL).createObjectURL(K);try{return l?new Worker(l):new Worker("data:application/javascript;base64,"+H)}finally{l&&(window.URL||window.webkitURL).revokeObjectURL(l)}}const v={urlCDN:"https://biowasm.com/cdn/v3",urlCDNStg:"https://stg.biowasm.com/cdn/v3",dirShared:"/shared",dirMounted:"/mnt",dirData:"/data",printInterleaved:!0,printStream:!1,callback:null,debug:!1,env:"prd"};class F{constructor(c,b={}){if(c==null)throw"Expecting array of tools as input to Aioli constructor.";return Array.isArray(c)||(c=[c]),b=Object.assign({},v,b),c=c.map(this._parseTool),b.env==="stg"&&(b.urlCDN=b.urlCDNStg),this.tools=c,this.config=b,this.config.callback!=null&&(this.callback=this.config.callback),delete this.config.callback,this.init()}async init(){const c=new f;this.callback&&(c.onmessage=t=>{t.data.type==="biowasm"&&this.callback(t.data.value)});const b=V(c);return b.tools=this.tools,b.config=this.config,await b.init(),b}_parseTool(c){if(typeof c!="string")return c;const b=c.split("/");if(b.length!=2&&b.length!=3)throw"Expecting '<tool>/<version>' or '<tool>/<program>/<version>'";return{tool:b[0],program:b.length==3?b[1]:b[0],version:b[b.length-1]}}}return F});
